using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libh3"], :libh3),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/wookay/H3Builder/releases/download/v3.4.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/H3.v3.4.2.aarch64-linux-gnu.tar.gz", "d376e5756c80712e72b9cabd2a96c834ae6de48ade9e9f0e3a52e25db7b71163"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/H3.v3.4.2.aarch64-linux-musl.tar.gz", "5510b59247ef3ea05120a18d95e3578e10e7e79cdf55fec842682e5d3cafa539"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/H3.v3.4.2.arm-linux-gnueabihf.tar.gz", "eecf494fe686876bd5798168e0944a9844ac6d6b320cb2d310b4a08292a690b1"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/H3.v3.4.2.arm-linux-musleabihf.tar.gz", "e1e3d2975ac7468a0df1d11cecce977b2888834b3b225d35787e48d5ae0dd054"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/H3.v3.4.2.i686-linux-gnu.tar.gz", "0c7b0cdd14b2c454aaf5838761cc6f0ba7e8d070122e5e3604f109842595f87a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/H3.v3.4.2.i686-linux-musl.tar.gz", "c600d257fe46b445d867d409d509d455c820f08b0687830ee4039f324c0d3139"),
    Windows(:i686) => ("$bin_prefix/H3.v3.4.2.i686-w64-mingw32.tar.gz", "445ba091482cd1609071e5dc481eaaa3a0d18d2ed8e18eb61d9d5a340f2d5420"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/H3.v3.4.2.powerpc64le-linux-gnu.tar.gz", "f619baed0bbb09d55938a4a8706445e0b3fa2e6b159246b713c1e641017c4af9"),
    MacOS(:x86_64) => ("$bin_prefix/H3.v3.4.2.x86_64-apple-darwin14.tar.gz", "083ca61953b2623dfef5c27644ce228149c331b2c967881ee04956c4209fd576"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/H3.v3.4.2.x86_64-linux-gnu.tar.gz", "92f58b768650d415f7da710af3b3dcc834ec950070d2973d9f59bf34ec0e8702"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/H3.v3.4.2.x86_64-linux-musl.tar.gz", "ed958cd1f4e0120ceac42eeaa7274da1bfc0f3342cb9cfa8b48841981396c728"),
    FreeBSD(:x86_64) => ("$bin_prefix/H3.v3.4.2.x86_64-unknown-freebsd11.1.tar.gz", "6507a4ad532318c506f4c57bbe9b302a59796937ecd5d7f20b31a5fb79e8e643"),
    Windows(:x86_64) => ("$bin_prefix/H3.v3.4.2.x86_64-w64-mingw32.tar.gz", "28d0985b5317c200811923c2d37b7ec51dbe0c59a79e90078d4030ca44724024"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
